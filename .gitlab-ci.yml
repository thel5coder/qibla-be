image: docker:git
services:
  - docker:dind

variables:
  DOCKER: ${CI_REGISTRY_IMAGE}
  SRC_SERVER: server
  SRC_SEND_NOTIFICATION: amqp_listener_send_notification

stages:
  - build
  - push
  - deploy
  - finish
  - clean

before_script:
  - docker login -u ${USERNAME} -p ${TOKEN} ${REGISTRY}

after_script:
  - docker logout ${REGISTRY}

build:one:
  stage: build
  script:
    - docker build . -f ${SRC_SERVER}/Dockerfile --compress --no-cache -t ${DOCKER}:${SRC_SERVER}-${CI_COMMIT_REF_NAME}
  only:
    - dev

build:two:
  stage: build
  script:
    - docker build . -f ${SRC_SEND_NOTIFICATION}/Dockerfile --compress --no-cache -t ${DOCKER}:${SRC_SEND_NOTIFICATION}-${CI_COMMIT_REF_NAME}
  only:
    - dev

push:one:
  stage: push
  needs: ["build:one"]
  script:
    - docker push ${DOCKER}:${SRC_SERVER}-${CI_COMMIT_REF_NAME}
  only:
    - dev

push:two:
  stage: push
  needs: ["build:two"]
  script:
    - docker push ${DOCKER}:${SRC_SEND_NOTIFICATION}-${CI_COMMIT_REF_NAME}
  only:
    - dev

deploy:one:
  stage: deploy
  needs: ["push:one"]
  script:
    - ssh -tq ${SERVER_DEV} "docker login -u ${USERNAME} -p ${TOKEN} ${REGISTRY} && docker pull ${DOCKER}:${SRC_SERVER}-${CI_COMMIT_REF_NAME}"
  only:
    - dev

deploy:two:
  stage: deploy
  needs: ["push:two"]
  script:
    - ssh -tq ${SERVER_DEV} "docker login -u ${USERNAME} -p ${TOKEN} ${REGISTRY} && docker pull ${DOCKER}:${SRC_SEND_NOTIFICATION}-${CI_COMMIT_REF_NAME}"
  only: 
    - dev

finish:one:
  stage: finish
  needs: ["deploy:one"]
  script:
    - ssh -tq ${SERVER_DEV} "cd ${SRC_DEV}/${SRC_SERVER} && docker-compose up -d"
  only:
    - dev

finish:two:
  stage: finish
  needs: ["deploy:two"]
  script:
    - ssh -tq ${SERVER_DEV} "cd ${SRC_DEV}/${SRC_SEND_NOTIFICATION} && docker-compose up -d"
  only: 
    - dev

cleanup:
  stage: clean
  script:
    - docker system prune -f
    - ssh -tq ${SERVER_DEV} "docker system prune -f"
  only:
    - dev